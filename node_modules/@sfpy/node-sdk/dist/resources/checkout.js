"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Checkout = void 0;
var builder_1 = require("../utils/builder");
var authorization_1 = require("./authorization");
var Checkout = /** @class */ (function () {
    function Checkout(config) {
        this.config = config;
        this.authorization = new authorization_1.Authorization(this.config);
    }
    Checkout.prototype.create = function (_a) {
        var cancelUrl = _a.cancelUrl, orderId = _a.orderId, redirectUrl = _a.redirectUrl, _b = _a.source, source = _b === void 0 ? 'custom' : _b, token = _a.token, _c = _a.webhooks, webhooks = _c === void 0 ? false : _c;
        var url = (0, builder_1.buildCheckoutUrl)(this.config.environment);
        var params = new URLSearchParams({
            beacon: token,
            cancel_url: cancelUrl,
            env: this.config.environment,
            order_id: orderId,
            redirect_url: redirectUrl,
            source: source,
            webhooks: String(webhooks)
        }).toString();
        return "".concat(url, "?").concat(params);
    };
    Checkout.prototype.createSubscription = function (_a) {
        var _this = this;
        var cancelUrl = _a.cancelUrl, redirectUrl = _a.redirectUrl, planId = _a.planId, reference = _a.reference;
        var url = this.authorization
            .create()
            .then(function (token) {
            return _this.createSubscriptionWithToken({
                cancelUrl: cancelUrl,
                redirectUrl: redirectUrl,
                planId: planId,
                authToken: token,
                reference: reference
            });
        })
            .catch(function (error) {
            return error;
        });
        return url;
    };
    Checkout.prototype.createSubscriptionWithToken = function (_a) {
        var cancelUrl = _a.cancelUrl, redirectUrl = _a.redirectUrl, planId = _a.planId, authToken = _a.authToken, reference = _a.reference;
        var url = (0, builder_1.buildSubscriptionCheckoutUrl)(this.config.environment);
        var params = new URLSearchParams({
            plan_id: planId,
            auth_token: authToken,
            env: this.config.environment,
            cancel_url: cancelUrl,
            redirect_url: redirectUrl
        });
        if (reference) {
            params.append("reference", reference);
        }
        return "".concat(url, "?").concat(params.toString());
    };
    return Checkout;
}());
exports.Checkout = Checkout;
